buildscript {
	repositories {
		gradlePluginPortal()
		mavenCentral()
	}
	dependencies {
		classpath 'com.modrinth.minotaur:Minotaur:2.8.7'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
		classpath "com.github.breadmoirai:github-release:2.5.1"
	}
}

import java.nio.file.Files

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

if (System.getenv("MODRINTH_TOKEN")) {
	apply plugin: "com.modrinth.minotaur"
}
if (System.getenv("CURSE_TOKEN")) {
	apply plugin: "com.matthewprenger.cursegradle"
}
if (System.getenv("GITHUB_TOKEN")) {
	apply plugin: "com.github.breadmoirai.github-release"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
def origVersion = project.version
version = project.version+"+1.21"
group = project.maven_group

repositories {
	maven {
		url 'https://repo.sleeping.town'
		content {
			includeGroup 'com.unascribed'
		}
	}
	maven {
		url 'https://maven.terraformersmc.com/releases'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
	maven {
		url 'https://maven.ssf.tf/'
		content {
			includeGroup 'tf.ssf.sfort'
		}
	}
	maven {
		url 'https://maven.gegy.dev/releases'
		content {
			includeGroup 'io.github.queerbric'
		}
	}
	maven {
		url 'https://repo.fabricmc.net'
		content {
			includeGroup 'net.fabricmc'
			includeGroup 'net.fabricmc.api'
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation fabricApi.module('fabric-api-base', project.fabric_version)
    modImplementation fabricApi.module('fabric-networking-api-v1', project.fabric_version)
	//Required by pridelib/modmenu
	modImplementation fabricApi.module('fabric-resource-loader-v0', project.fabric_version)
	modImplementation('io.github.queerbric:pridelib:1.2.1+1.21') {
		transitive = false
	}
	//ModMenu dep
	modImplementation fabricApi.module('fabric-lifecycle-events-v1', project.fabric_version)
	modImplementation fabricApi.module('fabric-key-binding-api-v1', project.fabric_version)
	modImplementation('com.terraformersmc:modmenu:11.0.2') {
		transitive = false
	}
	modImplementation 'com.unascribed:ears-api:1.4.6'
//	modImplementation('tf.ssf.sfort:fscript:3.2.3') {
//		transitive = false
//	}
	modImplementation(include('com.unascribed:lib39-deferral:1.5.0-experimental6.1+1.20.1'))
	modRuntimeOnly fabricApi.module('fabric-screen-api-v1', project.fabric_version)

	implementation 'com.google.code.gson:gson:2.11.0'
}

loom.accessWidenerPath = file('src/main/resources/fabrication.accesswidener')

apply plugin: FabFeaturesPlugin
apply plugin: FabPagesPlugin

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
	dependsOn(fabGenFeatures)
}

sourceSets {
	dummy {
		compileClasspath += configurations.compileClasspath
	}
	main {
		compileClasspath += dummy.output
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

jar {
	from 'LICENSE'
}

class Mapp{
	static class Target{
		Target(String target){
			int i = target.indexOf(' ');
			if (i == -1){
				this.self = target
				this.applicable = new ArrayList<>()
			} else {
				this.self = target.substring(0, i)
				this.applicable = target.substring(i).split(' ')
			}
		}
		public String self
		public List<String> applicable
	}
	void add(Mapp map){
		this.mixin.addAll(map.mixin)
		this.method.addAll(map.method)
		this.target.addAll(map.target)
	}
	void add(String[] mixin, String[] method, String[] target){
		for (String s : mixin) this.mixin.add(s)
		for (String s : method) this.method.add(s)
		for (String s : target) this.target.add(new Target(s))
	}
	void add(Target[] target){
		for (Target s : target) this.target.add(s)
	}
	Mapp(String[] mixin, String[] method, String[] target){
		this.mixin = mixin
		this.method = method
		this.target = new ArrayList<>()
		for (String s : target) this.target.add(new Target(s))
	}
	Mapp(String[] mixin, String[] method, Target[] target){
		this.mixin = mixin;
		this.method = method;
		this.target = target;
	}
	public List<String> mixin
	public List<String> method
	public List<Target> target
}

def mcVersions = [ '1.21', '1.21.1' ]

def stability = 'release'

def mrLoaders = [ 'fabric', 'quilt' ]

def curseLoaders = [ 'Fabric', 'Quilt' ]
def curseProject = '414445'

def mcmodcnClassID = '3548'
def mcmodcnLoaders = '2,11'

def artifact = remapJar.archivePath

if (System.getenv("PUBLISH_FORGERY")) {
	stability = 'beta'

	mrLoaders = [ 'forge' ]

	curseProject = '434087'
	curseLoaders = [ 'Forge' ]

	mcmodcnClassID = '3547'
	mcmodcnLoaders = '1'

	artifact = file(remapJar.archivePath.getPath().reverse().replaceFirst("fabrication".reverse(), "forgery".reverse()).reverse())
}

if (System.getenv("MODRINTH_TOKEN")) {
	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = 'fabrication'
		versionNumber = project.version
		versionName = 'v'+origVersion
		versionType = stability
		changelog = file('changelog.md').text
		uploadFile = artifact
		gameVersions = mcVersions
		loaders = mrLoaders
		detectLoaders = false
	}
}

if (System.getenv("CURSE_TOKEN")) {
	curseforge {
		apiKey = System.getenv("CURSE_TOKEN")
		project {
			id = curseProject
			releaseType = stability

			changelog = file('changelog.md')
			changelogType = 'markdown'

			for (def s : mcVersions) addGameVersion s
			for (def s : curseLoaders) addGameVersion s

			mainArtifact(artifact) {
				displayName = '['+project.minecraft_version+'] v'+origVersion
			}
		}
		options {
			javaIntegration = false
			forgeGradleIntegration = false
			javaVersionAutoDetect = false
		}
	}
}

if (System.getenv("GITHUB_TOKEN")) {
	githubRelease {
		token System.getenv("GITHUB_TOKEN")
		owner "unascribed"
		repo "Fabrication"
		tagName 'v'+origVersion
		releaseName 'v'+origVersion
		targetCommitish "3.0/1.18"
		body file('changelog.md').text
		draft false
		prerelease false
		releaseAssets artifact
		allowUploadToExisting true
	}
	tasks.githubRelease.dependsOn remapJar
}

if (System.getenv("MCMODCN_COOKIE")) {
	task mcmodcn(type: Exec) {
		dependsOn remapJar

		commandLine './mcmodcn-upload.sh', mcmodcnClassID, mcVersions[mcVersions.size()-1], mcmodcnLoaders, '', artifact.getPath()
	}
}
